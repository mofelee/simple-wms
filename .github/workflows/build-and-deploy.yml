name: Build and Deploy to Aliyun OSS

on:
  push:
    tags:
      - 'v*' # 当推送带有 'v' 前缀的标签时触发（如 v1.0.0）
  workflow_dispatch: # 允许手动触发

env:
  # 阿里云 OSS 配置 - 这些需要在 GitHub Secrets 中配置
  ALIYUN_ACCESS_KEY_ID: ${{ secrets.ALIYUN_ACCESS_KEY_ID }}
  ALIYUN_ACCESS_KEY_SECRET: ${{ secrets.ALIYUN_ACCESS_KEY_SECRET }}
  ALIYUN_OSS_BUCKET: simple-wms
  ALIYUN_OSS_REGION: cn-shanghai
  ALIYUN_OSS_ENDPOINT: oss-accelerate.aliyuncs.com

jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
        
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run make
      env:
        NODE_ENV: production
        
    - name: Get version from package.json
      id: get_version
      run: echo "version=$(node -p \"require('./package.json').version\")" >> $GITHUB_OUTPUT
      shell: bash
      
    - name: List build outputs (Debug)
      run: |
        echo "Listing out directory contents:"
        find out -type f -name "*.exe" -o -name "*.dmg" -o -name "*.deb" -o -name "*.rpm" -o -name "*.zip" 2>/dev/null | head -20 || echo "No build outputs found"
      shell: bash
    
    - name: Prepare macOS manifest (latest-mac.yml)
      if: runner.os == 'macOS'
      run: |
        set -euo pipefail
        ZIP_FILE=$(find out -type f -name "*-darwin-*.zip" -print -quit || true)
        if [ -z "$ZIP_FILE" ]; then
          ZIP_FILE=$(find out -type f -name "*.dmg" -print -quit || true)
        fi
        if [ -z "$ZIP_FILE" ]; then
          echo "No macOS artifact found" >&2
          exit 1
        fi
        filename=$(basename "$ZIP_FILE")
        SHA512=$(openssl dgst -sha512 -binary "$ZIP_FILE" | base64)
        SIZE=$(stat -f%z "$ZIP_FILE")
        cat > latest-mac.yml << EOF
        version: ${{ steps.get_version.outputs.version }}
        releaseDate: $(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ")
        files:
          - url: $filename
            sha512: $SHA512
            size: $SIZE
        path: $filename
        sha512: $SHA512
        releaseNotes: "Version ${{ steps.get_version.outputs.version }}"
        EOF
      shell: bash

    - name: Upload to OSS - macOS (tvrcgo/oss-action)
      if: runner.os == 'macOS'
      uses: tvrcgo/oss-action@master
      with:
        key-id: ${{ env.ALIYUN_ACCESS_KEY_ID }}
        key-secret: ${{ env.ALIYUN_ACCESS_KEY_SECRET }}
        endpoint: ${{ env.ALIYUN_OSS_ENDPOINT }}
        bucket: ${{ env.ALIYUN_OSS_BUCKET }}
        assets: |
          out/**/*-darwin-*.zip:/${{ steps.get_version.outputs.version }}/
          out/**/*.dmg:/${{ steps.get_version.outputs.version }}/
          latest-mac.yml:/latest-mac.yml
      
    - name: Upload to OSS - Windows (tvrcgo/oss-action)
      if: runner.os == 'Windows'
      uses: tvrcgo/oss-action@master
      with:
        key-id: ${{ env.ALIYUN_ACCESS_KEY_ID }}
        key-secret: ${{ env.ALIYUN_ACCESS_KEY_SECRET }}
        endpoint: ${{ env.ALIYUN_OSS_ENDPOINT }}
        bucket: ${{ env.ALIYUN_OSS_BUCKET }}
        assets: |
          out/**/*.exe:/${{ steps.get_version.outputs.version }}/
          out/**/*-win32-*.zip:/${{ steps.get_version.outputs.version }}/
          out/**/RELEASES:/RELEASES
          out/**/*.nupkg:/
      
    - name: Upload to OSS - Linux (tvrcgo/oss-action)
      if: runner.os == 'Linux'
      uses: tvrcgo/oss-action@master
      with:
        key-id: ${{ env.ALIYUN_ACCESS_KEY_ID }}
        key-secret: ${{ env.ALIYUN_ACCESS_KEY_SECRET }}
        endpoint: ${{ env.ALIYUN_OSS_ENDPOINT }}
        bucket: ${{ env.ALIYUN_OSS_BUCKET }}
        assets: |
          out/**/*-linux-*.zip:/${{ steps.get_version.outputs.version }}/
          out/**/*.deb:/${{ steps.get_version.outputs.version }}/
          out/**/*.rpm:/${{ steps.get_version.outputs.version }}/

  # Centralized manifest creation job removed; manifests are created per-platform in build job
