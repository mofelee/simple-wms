name: Build and Deploy to Aliyun OSS

on:
  push:
    tags:
      - 'v*' # 当推送带有 'v' 前缀的标签时触发（如 v1.0.0）
  workflow_dispatch: # 允许手动触发

env:
  # 阿里云 OSS 配置 - 这些需要在 GitHub Secrets 中配置
  ALIYUN_ACCESS_KEY_ID: ${{ secrets.ALIYUN_ACCESS_KEY_ID }}
  ALIYUN_ACCESS_KEY_SECRET: ${{ secrets.ALIYUN_ACCESS_KEY_SECRET }}
  ALIYUN_OSS_BUCKET: simple-wms
  ALIYUN_OSS_REGION: oss-accelerate
  ALIYUN_OSS_ENDPOINT: oss-accelerate.aliyuncs.com

jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
        
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run make
      env:
        NODE_ENV: production
        
    - name: Get version from package.json
      id: get_version
      run: echo "version=$(node -p \"require('./package.json').version\")" >> $GITHUB_OUTPUT
      shell: bash
      
    - name: List build outputs (Debug)
      run: |
        echo "Listing out directory contents:"
        find out -type f -name "*.exe" -o -name "*.dmg" -o -name "*.deb" -o -name "*.rpm" -o -name "*.zip" 2>/dev/null | head -20 || echo "No build outputs found"
      shell: bash
        
    # Install Aliyun OSS CLI v2 (per official doc: https://help.aliyun.com/zh/oss/developer-reference/install-ossutil2)
    - name: Install Aliyun OSS CLI (macOS)
      if: runner.os == 'macOS'
      run: |
        set -euo pipefail
        ARCH=$(uname -m)
        if [ "$ARCH" = "arm64" ]; then
          URL="https://gosspublic.alicdn.com/ossutil/v2/2.1.2/ossutil-2.1.2-mac-arm64.zip"
          DIR="ossutil-2.1.2-mac-arm64"
        else
          URL="https://gosspublic.alicdn.com/ossutil/v2/2.1.2/ossutil-2.1.2-mac-amd64.zip"
          DIR="ossutil-2.1.2-mac-amd64"
        fi
        curl -fsSL -o ossutil.zip -L "$URL"
        unzip -q ossutil.zip
        sudo mv "$DIR/ossutil" /usr/local/bin/ossutil
        sudo chmod +x /usr/local/bin/ossutil
        /usr/local/bin/ossutil help >/dev/null 2>&1
      shell: bash

    - name: Install Aliyun OSS CLI (Linux)
      if: runner.os == 'Linux'
      run: |
        set -euo pipefail
        ARCH=$(uname -m)
        case "$ARCH" in
          x86_64) URL="https://gosspublic.alicdn.com/ossutil/v2/2.1.2/ossutil-2.1.2-linux-amd64.zip"; DIR="ossutil-2.1.2-linux-amd64";;
          aarch64) URL="https://gosspublic.alicdn.com/ossutil/v2/2.1.2/ossutil-2.1.2-linux-arm64.zip"; DIR="ossutil-2.1.2-linux-arm64";;
          armv7l) URL="https://gosspublic.alicdn.com/ossutil/v2/2.1.2/ossutil-2.1.2-linux-arm.zip"; DIR="ossutil-2.1.2-linux-arm";;
          i386|i686) URL="https://gosspublic.alicdn.com/ossutil/v2/2.1.2/ossutil-2.1.2-linux-386.zip"; DIR="ossutil-2.1.2-linux-386";;
          *) URL="https://gosspublic.alicdn.com/ossutil/v2/2.1.2/ossutil-2.1.2-linux-amd64.zip"; DIR="ossutil-2.1.2-linux-amd64";;
        esac
        curl -fsSL -o ossutil.zip -L "$URL"
        unzip -q ossutil.zip
        sudo mv "$DIR/ossutil" /usr/local/bin/ossutil
        sudo chmod +x /usr/local/bin/ossutil
        /usr/local/bin/ossutil help >/dev/null 2>&1
      shell: bash

    - name: Install Aliyun OSS CLI (Windows)
      if: runner.os == 'Windows'
      run: |
        $url = "https://gosspublic.alicdn.com/ossutil/v2/2.1.2/ossutil-2.1.2-windows-amd64.zip"
        $zip = "$env:RUNNER_TEMP\ossutil.zip"
        $dst = "$env:RUNNER_TEMP\ossutil"
        Invoke-WebRequest -Uri $url -OutFile $zip
        Expand-Archive -Path $zip -DestinationPath $dst -Force
        $exe = Join-Path $dst "ossutil.exe"
        if (!(Test-Path $exe)) { throw "ossutil.exe not found after extraction" }
        New-Item -ItemType Directory -Force -Path "$HOME\bin" | Out-Null
        Copy-Item $exe "$HOME\bin\ossutil.exe" -Force
        "$HOME\bin" | Out-File -FilePath $env:GITHUB_PATH -Append
        & "$HOME\bin\ossutil.exe" help | Out-Null
      shell: pwsh
      
    - name: Configure Aliyun OSS
      run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          ossutil.exe config -e ${{ env.ALIYUN_OSS_ENDPOINT }} -i ${{ env.ALIYUN_ACCESS_KEY_ID }} -k ${{ env.ALIYUN_ACCESS_KEY_SECRET }}
        else
          ossutil config -e ${{ env.ALIYUN_OSS_ENDPOINT }} -i ${{ env.ALIYUN_ACCESS_KEY_ID }} -k ${{ env.ALIYUN_ACCESS_KEY_SECRET }}
        fi
      shell: bash
      
    - name: Upload to OSS - macOS
      if: runner.os == 'macOS'
      run: |
        set -euo pipefail
        echo "Resolving macOS artifact..."
        ZIP_FILE=$(find out -type f -name "*-darwin-*.zip" -print -quit || true)
        if [ -z "$ZIP_FILE" ]; then
          echo "No zip found, trying dmg..."
          ZIP_FILE=$(find out -type f -name "*.dmg" -print -quit || true)
        fi
        if [ -z "$ZIP_FILE" ]; then
          echo "No macOS artifact found" >&2
          exit 1
        fi
        filename=$(basename "$ZIP_FILE")
        echo "Artifact: $ZIP_FILE"

        SHA512=$(openssl dgst -sha512 -binary "$ZIP_FILE" | base64)
        SIZE=$(stat -f%z "$ZIP_FILE")

        ossutil cp "$ZIP_FILE" "oss://${{ env.ALIYUN_OSS_BUCKET }}/${{ steps.get_version.outputs.version }}/$filename" --force
        ossutil cp "$ZIP_FILE" "oss://${{ env.ALIYUN_OSS_BUCKET }}/$filename" --force

        cat > latest-mac.yml << EOF
        version: ${{ steps.get_version.outputs.version }}
        releaseDate: $(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ")
        files:
          - url: $filename
            sha512: $SHA512
            size: $SIZE
        path: $filename
        sha512: $SHA512
        releaseNotes: "Version ${{ steps.get_version.outputs.version }}"
        EOF

        ossutil cp latest-mac.yml "oss://${{ env.ALIYUN_OSS_BUCKET }}/latest-mac.yml" --force
      shell: bash
      
    - name: Upload to OSS - Windows  
      if: runner.os == 'Windows'
      run: |
        # 上传安装包
        Get-ChildItem -Recurse out -Include "*.exe","*-win32-*.zip" | ForEach-Object {
          $filename = $_.Name
          Write-Host "Uploading Windows installer: $($_.FullName) -> $filename"
          & ossutil.exe cp "$($_.FullName)" "oss://${{ env.ALIYUN_OSS_BUCKET }}/${{ steps.get_version.outputs.version }}/$filename" --force
        }

        # 上传用于Squirrel.Windows自动更新的文件到根目录
        $releases = Get-ChildItem -Recurse out -Filter RELEASES | Select-Object -First 1
        if ($null -ne $releases) {
          Write-Host "Uploading RELEASES: $($releases.FullName)"
          & ossutil.exe cp "$($releases.FullName)" "oss://${{ env.ALIYUN_OSS_BUCKET }}/RELEASES" --force
        } else {
          Write-Host "RELEASES not found"
        }

        Get-ChildItem -Recurse out -Include "*.nupkg" | ForEach-Object {
          $filename = $_.Name
          Write-Host "Uploading nupkg: $($_.FullName) -> $filename"
          & ossutil.exe cp "$($_.FullName)" "oss://${{ env.ALIYUN_OSS_BUCKET }}/$filename" --force
        }
      shell: pwsh
      
    - name: Upload to OSS - Linux
      if: runner.os == 'Linux'
      run: |
        # 查找并上传 Linux 构建产物
        for file in $(find out -type f -name "*.deb" -o -name "*.rpm" -o -name "*-linux-*.zip" 2>/dev/null || true); do
          if [ -f "$file" ]; then
            filename=$(basename "$file")
            echo "Uploading Linux file: $file -> $filename"
            ossutil cp "$file" "oss://${{ env.ALIYUN_OSS_BUCKET }}/${{ steps.get_version.outputs.version }}/$filename" --force
          fi
        done
      shell: bash

  # Centralized manifest creation job removed; manifests are created per-platform in build job
