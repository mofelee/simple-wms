name: Build and Deploy to Aliyun OSS

on:
  push:
    tags:
      - 'v*' # 当推送带有 'v' 前缀的标签时触发（如 v1.0.0）
  workflow_dispatch: # 允许手动触发

env:
  # 阿里云 OSS 配置 - 这些需要在 GitHub Secrets 中配置
  ALIYUN_ACCESS_KEY_ID: ${{ secrets.ALIYUN_ACCESS_KEY_ID }}
  ALIYUN_ACCESS_KEY_SECRET: ${{ secrets.ALIYUN_ACCESS_KEY_SECRET }}
  ALIYUN_OSS_BUCKET: simple-wms
  ALIYUN_OSS_REGION: cn-shanghai
  ALIYUN_OSS_ENDPOINT: oss-accelerate.aliyuncs.com

jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
        
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run make
      env:
        NODE_ENV: production
        
    - name: Get version from package.json
      id: get_version
      run: |
        VERSION=$(node -p "require('./package.json').version")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Extracted version: $VERSION"
      shell: bash
      
    - name: List build outputs (Debug)
      run: |
        echo "Listing out directory contents:"
        find out -type f -name "*.exe" -o -name "*.dmg" -o -name "*.deb" -o -name "*.rpm" -o -name "*.zip" 2>/dev/null | head -20 || echo "No build outputs found"
      shell: bash
    
    - name: Prepare macOS files and manifest
      if: runner.os == 'macOS'
      run: |
        set -euo pipefail
        VERSION="${{ steps.get_version.outputs.version }}"
        
        # 创建上传目录
        mkdir -p upload
        
        # 查找 macOS 构建文件
        ZIP_FILE=$(find out -type f -name "*-darwin-*.zip" -print -quit || true)
        if [ -z "$ZIP_FILE" ]; then
          ZIP_FILE=$(find out -type f -name "*.dmg" -print -quit || true)
        fi
        if [ -z "$ZIP_FILE" ]; then
          echo "No macOS artifact found" >&2
          exit 1
        fi
        
        filename=$(basename "$ZIP_FILE")
        echo "Found macOS artifact: $ZIP_FILE -> ${filename}"
        
        # 移动文件到上传目录
        mv "$ZIP_FILE" "upload/$filename"
        
        # 计算文件信息
        SHA512=$(openssl dgst -sha512 -binary "upload/$filename" | base64)
        SIZE=$(stat -f%z "upload/$filename")
        
        # 生成 manifest 文件
        cat > upload/latest-mac.yml << EOF
        version: $VERSION
        releaseDate: $(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ")
        files:
          - url: https://simple-wms.oss-accelerate.aliyuncs.com/$filename
            sha512: $SHA512
            size: $SIZE
        path: $filename
        sha512: $SHA512
        releaseNotes: "Version $VERSION"
        EOF
        
        echo "Generated latest-mac.yml for version ${VERSION}:"
        cat upload/latest-mac.yml
        echo "Files in upload directory:"
        ls -la upload/
      shell: bash

    - name: Upload to OSS - macOS (tvrcgo/oss-action)
      if: runner.os == 'macOS'
      uses: tvrcgo/oss-action@master
      with:
        key-id: ${{ env.ALIYUN_ACCESS_KEY_ID }}
        key-secret: ${{ env.ALIYUN_ACCESS_KEY_SECRET }}
        endpoint: ${{ env.ALIYUN_OSS_ENDPOINT }}
        bucket: ${{ env.ALIYUN_OSS_BUCKET }}
        assets: |
          upload/*:/
      
    - name: Prepare Windows files and manifest
      if: runner.os == 'Windows'
      run: |
        $VERSION = "${{ steps.get_version.outputs.version }}"
        
        # 创建上传目录
        New-Item -ItemType Directory -Force -Path upload | Out-Null
        
        # 查找并移动 Windows 构建文件
        $EXE_FILE = Get-ChildItem -Recurse out -Include "*.exe" | Select-Object -First 1
        if ($null -eq $EXE_FILE) {
          Write-Error "No Windows executable found"
          exit 1
        }
        $filename = $EXE_FILE.Name
        Write-Host "Found Windows executable: $($EXE_FILE.FullName) -> ${filename}"
        Move-Item $EXE_FILE.FullName "upload\$filename"
        
        # 移动其他 Windows 文件
        Get-ChildItem -Recurse out -Include "*-win32-*.zip" | ForEach-Object {
          $zipname = $_.Name
          Write-Host "Moving Windows zip: $($_.FullName) -> ${zipname}"
          Move-Item $_.FullName "upload\$zipname"
        }
        
        # 移动 Squirrel.Windows 文件
        $RELEASES = Get-ChildItem -Recurse out -Filter RELEASES | Select-Object -First 1
        if ($null -ne $RELEASES) {
          Write-Host "Moving RELEASES file: $($RELEASES.FullName)"
          Move-Item $RELEASES.FullName "upload\RELEASES"
        }
        
        Get-ChildItem -Recurse out -Include "*.nupkg" | ForEach-Object {
          $nupkgname = $_.Name
          Write-Host "Moving nupkg: $($_.FullName) -> ${nupkgname}"
          Move-Item $_.FullName "upload\$nupkgname"
        }
        
        # 计算主执行文件的信息
        $SHA512 = (Get-FileHash -Algorithm SHA512 "upload\$filename").Hash.ToLower()
        $SIZE = (Get-Item "upload\$filename").Length
        $releaseDate = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffZ")
        
        # 生成 manifest 文件
        @"
        version: $VERSION
        releaseDate: $releaseDate
        files:
          - url: https://simple-wms.oss-accelerate.aliyuncs.com/$filename
            sha512: $SHA512
            size: $SIZE
        path: $filename
        sha512: $SHA512
        releaseNotes: "Version $VERSION"
        "@ | Out-File -FilePath upload\latest.yml -Encoding UTF8
        
        Write-Host "Generated latest.yml for version ${VERSION}:"
        Get-Content upload\latest.yml
        Write-Host "Files in upload directory:"
        Get-ChildItem upload
      shell: pwsh

    - name: Upload to OSS - Windows (tvrcgo/oss-action)
      if: runner.os == 'Windows'
      uses: tvrcgo/oss-action@master
      with:
        key-id: ${{ env.ALIYUN_ACCESS_KEY_ID }}
        key-secret: ${{ env.ALIYUN_ACCESS_KEY_SECRET }}
        endpoint: ${{ env.ALIYUN_OSS_ENDPOINT }}
        bucket: ${{ env.ALIYUN_OSS_BUCKET }}
        assets: |
          upload/*:/
      
    - name: Prepare Linux files and manifest
      if: runner.os == 'Linux'
      run: |
        set -euo pipefail
        VERSION="${{ steps.get_version.outputs.version }}"
        
        # 创建上传目录
        mkdir -p upload
        
        # 查找并移动 Linux 构建文件
        # 优先查找 AppImage，然后是 deb，最后是 rpm
        LINUX_FILE=$(find out -type f -name "*.AppImage" -print -quit || true)
        if [ -z "$LINUX_FILE" ]; then
          LINUX_FILE=$(find out -type f -name "*.deb" -print -quit || true)
        fi
        if [ -z "$LINUX_FILE" ]; then
          LINUX_FILE=$(find out -type f -name "*.rpm" -print -quit || true)
        fi
        if [ -z "$LINUX_FILE" ]; then
          LINUX_FILE=$(find out -type f -name "*-linux-*.zip" -print -quit || true)
        fi
        if [ -z "$LINUX_FILE" ]; then
          echo "No Linux artifact found" >&2
          exit 1
        fi
        
        filename=$(basename "$LINUX_FILE")
        echo "Found Linux artifact: $LINUX_FILE -> ${filename}"
        
        # 移动主文件到上传目录
        mv "$LINUX_FILE" "upload/$filename"
        
        # 移动其他 Linux 文件
        find out -type f \( -name "*-linux-*.zip" -o -name "*.deb" -o -name "*.rpm" -o -name "*.AppImage" \) | while read -r file; do
          if [ "$file" != "$LINUX_FILE" ]; then
            fname=$(basename "$file")
            echo "Moving additional Linux file: $file -> ${fname}"
            mv "$file" "upload/$fname"
          fi
        done
        
        # 计算文件信息
        SHA512=$(sha512sum "upload/$filename" | awk '{print $1}')
        SIZE=$(stat -c%s "upload/$filename")
        
        # 生成 latest-linux.yml (平台特定)
        cat > upload/latest-linux.yml << EOF
        version: $VERSION
        releaseDate: $(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ")
        files:
          - url: https://simple-wms.oss-accelerate.aliyuncs.com/$filename
            sha512: $SHA512
            size: $SIZE
        path: $filename
        sha512: $SHA512
        releaseNotes: "Version $VERSION"
        EOF
        
        # 也生成通用的 latest.yml (如果 Windows 构建失败时的备用)
        cp upload/latest-linux.yml upload/latest.yml
        
        echo "Generated latest-linux.yml and latest.yml for version ${VERSION}:"
        cat upload/latest-linux.yml
        echo "Files in upload directory:"
        ls -la upload/
      shell: bash

    - name: Upload to OSS - Linux (tvrcgo/oss-action)
      if: runner.os == 'Linux'
      uses: tvrcgo/oss-action@master
      with:
        key-id: ${{ env.ALIYUN_ACCESS_KEY_ID }}
        key-secret: ${{ env.ALIYUN_ACCESS_KEY_SECRET }}
        endpoint: ${{ env.ALIYUN_OSS_ENDPOINT }}
        bucket: ${{ env.ALIYUN_OSS_BUCKET }}
        assets: |
          upload/*:/

  # Centralized manifest creation job removed; manifests are created per-platform in build job
