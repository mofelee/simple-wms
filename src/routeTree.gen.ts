/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TestRouteImport } from './routes/test'
import { Route as PromptTestRouteImport } from './routes/prompt-test'
import { Route as PrinterRouteImport } from './routes/printer'
import { Route as CsvscannerRouteImport } from './routes/csvscanner'
import { Route as IndexRouteImport } from './routes/index'

const TestRoute = TestRouteImport.update({
  id: '/test',
  path: '/test',
  getParentRoute: () => rootRouteImport,
} as any)
const PromptTestRoute = PromptTestRouteImport.update({
  id: '/prompt-test',
  path: '/prompt-test',
  getParentRoute: () => rootRouteImport,
} as any)
const PrinterRoute = PrinterRouteImport.update({
  id: '/printer',
  path: '/printer',
  getParentRoute: () => rootRouteImport,
} as any)
const CsvscannerRoute = CsvscannerRouteImport.update({
  id: '/csvscanner',
  path: '/csvscanner',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/csvscanner': typeof CsvscannerRoute
  '/printer': typeof PrinterRoute
  '/prompt-test': typeof PromptTestRoute
  '/test': typeof TestRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/csvscanner': typeof CsvscannerRoute
  '/printer': typeof PrinterRoute
  '/prompt-test': typeof PromptTestRoute
  '/test': typeof TestRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/csvscanner': typeof CsvscannerRoute
  '/printer': typeof PrinterRoute
  '/prompt-test': typeof PromptTestRoute
  '/test': typeof TestRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/csvscanner' | '/printer' | '/prompt-test' | '/test'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/csvscanner' | '/printer' | '/prompt-test' | '/test'
  id: '__root__' | '/' | '/csvscanner' | '/printer' | '/prompt-test' | '/test'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CsvscannerRoute: typeof CsvscannerRoute
  PrinterRoute: typeof PrinterRoute
  PromptTestRoute: typeof PromptTestRoute
  TestRoute: typeof TestRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/test': {
      id: '/test'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof TestRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/prompt-test': {
      id: '/prompt-test'
      path: '/prompt-test'
      fullPath: '/prompt-test'
      preLoaderRoute: typeof PromptTestRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/printer': {
      id: '/printer'
      path: '/printer'
      fullPath: '/printer'
      preLoaderRoute: typeof PrinterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/csvscanner': {
      id: '/csvscanner'
      path: '/csvscanner'
      fullPath: '/csvscanner'
      preLoaderRoute: typeof CsvscannerRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CsvscannerRoute: CsvscannerRoute,
  PrinterRoute: PrinterRoute,
  PromptTestRoute: PromptTestRoute,
  TestRoute: TestRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
